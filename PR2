// Time Complexity : O(max(n)) - where n is the last day of the year that we intend to travel.
// Space Complexity : O(n) - where n is the number of days that we intend to travel.
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No
// Your code here along with comments explaining your approach: Dp approach create a dp array os size maximum (the last day of the year that we intend to travel) and build upon it the minimum costs.

class Solution {
    public int mincostTickets(int[] days, int[] costs) {
        Set<Integer> hset=new HashSet<>();
        for(int i=0;i<days.length;i++){
            hset.add(days[i]);
        }
        int max=days[days.length-1];
        System.out.println(max);
        int[] dp=new int[max+1];
        for(int i=1;i<dp.length;i++){
            if(hset.contains(i)){
                dp[i]=Math.min(dp[i-1]+costs[0],
                          Math.min(dp[Math.max(i-7,0)]+costs[1],
                                   dp[Math.max(i-30,0)]+costs[2]));
            }
            else{
                dp[i]=dp[i-1];
            }
            
        }
        return dp[dp.length-1];
    }
}
