//Time Complexity: O(m*n), Space Complexity: O(1)
class Solution {
    public int minFallingPathSum(int[][] matrix) {
        int m=matrix.length;//rows
        int n=matrix[0].length;//columns     

        for(int i=m-2;i>=0;i--)
        {
           for(int j = 0 ; j <n; j++)
            {                               
                if(j == 0)
                {
                    matrix[i][j] += Math.min(matrix[i+1][j], matrix[i+1][j+1]);
                }
                else if(j == n-1)
                {
                    matrix[i][j] += Math.min(matrix[i+1][j-1], matrix[i+1][j]);
                }
                else 
                {
                    matrix[i][j]+= Math.min(matrix[i+1][j-1],Math.min(matrix[i+1][j], matrix[i+1][j+1]));
                }          
            }  
        }

        int min=Integer.MAX_VALUE;
        for(int i=0;i<matrix[0].length;i++){
            min=Math.min(min, matrix[0][i]);
        }
        return min;
    }
}