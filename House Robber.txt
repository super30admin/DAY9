//Time Complexity: O(n)
//Space Complexity: O(n)
//Approach: Calculate maximum robbery until each house.
//Maximum robbery is always the maximum between no choose case and choose case. 
//In no choose case prev value would come as is to current element, 
//while in choose case current element would be sum of current house value+ amount in one house back house
class Solution {
    public int rob(int[] nums) {
        if(nums.length==1) return nums[0];        
        int dp[]=new int[nums.length];
        int prev=nums[0];
        int curr=Math.max(nums[0], nums[1]);
       
        for(int i=2;i<nums.length;i++){            
            int temp=Math.max(curr, nums[i]+prev);            
            prev=curr;
            curr=temp;
        }

        return curr;
    }
}