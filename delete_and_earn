// Time Complexity : O(max(N, K)) where N is the size of nums and K is the largest value in nums.
// Space Complexity : O(max(N, K))
// Did this code successfully run in leetcode : Yes
// Any problems faced : No
// storing the value of every number results in house robber problem where two adjacent houses cannot be robbed.

class Solution {
public:
    int deleteAndEarn(vector<int>& nums) {
        if(nums.size() == 1) return nums[0];
        int maxNum = INT_MIN;
        for(int i = 0; i < nums.size(); i++) {
            maxNum = max(maxNum, nums[i]);
        }
        vector<int> arr(maxNum + 1);
        for(int i = 0; i < nums.size(); i++) {
            arr[nums[i]] += nums[i];
        }
        int prev = arr[0];
        int curr = max(arr[0], arr[1]);
        for(int i = 2; i < arr.size(); i++) {   // O(K)
            int temp = curr;
            curr = max(arr[i] + prev, curr);
            prev = temp;
        }
        return curr;
    }
};