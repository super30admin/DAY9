// Time Complexity : O(n x n) 
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : yes
// Three line explanation of solution in plain english
deciding the conditions
// Your code here along with comments explaining your approach
class Solution {
    public int minFallingPathSum(int[][] matrix) {
        
        for(int i=1; i<matrix.length; i++)
        {
            for(int j=0; j<matrix[0].length; j++)
            {
                if(j==0)
                {
                    matrix[i][j] += Math.min(matrix[i-1][j], matrix[i-1][j+1]);
                }
                
                else if(j == matrix[0].length-1)
                {
                    matrix[i][j] += Math.min(matrix[i-1][matrix[0].length-2], matrix[i-1][matrix[0].length-1]);
                }
               
                else
                {
                    matrix[i][j] += Math.min(matrix[i-1][j-1], Math.min(matrix[i-1][j], matrix[i-1][j+1]));
                }
                
                
            }
        }
        int min =matrix[matrix.length-1][0];
         for(int j=0; j<matrix[0].length; j++)
            min = Math.min(matrix[matrix.length-1][j], min);
       
        return min;
        
    }
}
