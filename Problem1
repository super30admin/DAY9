// Time Complexity :O(m*n)
// Space Complexity :O(1)
// Did this code successfully run on Leetcode :yes
class Problem1 {
    public int minFallingPathSum(int[][] matrix) {
        int [][] dp = new int[matrix.length][matrix.length];
        
        for (int i = 0; i < matrix.length; i++) {
            dp[0][i] = matrix[0][i];
        }
        
        for (int i = 1; i < matrix.length; i++) {
            for (int j = 0; j < matrix.length; j++) {
                if (j == 0) {
                    dp[i][j] = Math.min(dp[i-1][j], dp[i-1][j+1]) + matrix[i][j];
                } else if (j == matrix.length -1) {
                    dp[i][j] = (Math.min(dp[i-1][j], dp[i-1][j-1])) + matrix[i][j];
                } else {
                    dp[i][j] = Math.min(Math.min(dp[i-1][j-1], dp[i-1][j]), dp[i-1][j+1]) + matrix[i][j];
                }
            }
        }
        
        int res = Integer.MAX_VALUE;
        for (int num: dp[matrix.length -1]) {
            res = Math.min(res, num);
        }
        return res;
    }
}