// Time Complexity : O(M * N) where M is the no. of rows and n is the no. of cols
// Space Complexity : O(1)
// Did this code successfully run in leetcode : Yes
// Any problems faced : No

class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int m = matrix.size();
        int n = matrix[0].size();
        for(int i = m - 2; i >= 0; i--) {
            for(int j = 0; j < n; j++) {
                if(j == 0 && j == n - 1) {
                    matrix[i][j] += matrix[i + 1][j];
                }
                if(j == 0) {
                    matrix[i][j] += min(matrix[i + 1][j], matrix[i + 1][j + 1]);
                }
                if(j == n - 1) {
                    matrix[i][j] += min(matrix[i + 1][j], matrix[i + 1][j - 1]);
                }
                if(j != 0 && j != n - 1) {
                    matrix[i][j] += min(matrix[i + 1][j], min(matrix[i + 1][j - 1], matrix[i + 1][j + 1]));
                }
            }
        }
        int res = INT_MAX;
        for(int j = 0; j < n; j++) {
            res = min(res, matrix[0][j]);
        }
        return res;
    }
};