Approach 1 : Brute Force by considering a tree by chooosing or not choosing a coin and see how much we earn. 
Time complexity : O(n*2^n) , 2^n --- > Since the tree is divided into two all the time. n ---> At every tree we need to find the numerical value and delete them.
Space complexity : O(n) . considering recursive call stack

Approach 2 : DP matrix with 0/1
Time Complexity : O(n + Max(nums))
Space Complexity : O(Max) ---- > We are building a new array

class Solution:
    def deleteAndEarn(self, nums: List[int]) -> int:
        ### edge case
        if not nums:
            return 0
        ## Initalize the data structure
        val_at=[0]*(max(nums)+1)
        dp=[[0,0] for i in range(len(val_at))]
        for num in nums:
            val_at[num]+=num
        for i in range(1,len(dp)):
            dp[i][0]=max(dp[i-1][0],dp[i-1][1])
            dp[i][1]=val_at[i]+dp[i-1][0]
        return max(dp[-1])
        
  Approach 2 : With out a matrix and just two variables as we don't need the enire matrix to compute the values at each row of the val array
  
  class Solution:
    def deleteAndEarn(self, nums: List[int]) -> int:
        ### edge case
        if not nums:
            return 0
        ## Initalize the data structure
        val_at=[0]*(max(nums)+1)
        prev_skip=0
        prev_take=0
        for num in nums: ### new array with sum of nums 
            val_at[num]+=num
        for i in range(1,len(val_at)):
            temp=prev_skip
            prev_skip=max(prev_skip,prev_take)
            prev_take=val_at[i]+temp
        return max(prev_skip,prev_take)
