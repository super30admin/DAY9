// TC = O(n^2)
// SC = O(n^2)

class Solution {
    public int minFallingPathSum(int[][] matrix) {
        
        int n = matrix.length;
    if (n == 1) {
      return matrix[0][0];
    }
    int[][] dp = new int[n][n];
    for (int i = 0; i < n; i++) {
      dp[0][i] = matrix[0][i];
    }
    for (int j = 1; j < n; j++) {
      for (int i = 0; i < n; i++) {
        if (i == 0) {
          dp[j][i] = Math.min(
              dp[j - 1][i], dp[j - 1][i + 1]) + matrix[j][i];
        } else if (i == n - 1) {
          dp[j][i] = Math.min(dp[j - 1][i], dp[j - 1][i -1]) + matrix[j][i];
        } else {
          dp[j][i] = matrix[j][i] +  Math.min(
              Math.min(dp[j - 1][i], dp[j - 1][i + 1]), 
              dp[j - 1][i - 1]);
        }
      }
    }
    int res = dp[n - 1][0];
    for (int i = 1; i < n; i++) {
      if (dp[n - 1][i] < res) {
        res = dp[n - 1][i];
      }
    }
    return res;
    }
}