Approach 1 : Brute Force Approach
Time Complexity :O(n*2)
Space Complexity :O(1)
class Solution:
    def minFallingPathSum(self, A: List[List[int]]) -> int:
        n=len(A)
        dp=[[0]*(n) for j in range(0,n)]
        print(dp)
        for i in range(0,n):
            dp[0][i]=A[0][i]
        for i in range(1,n): ## Rows
            for j in range(0,n): ## Columns
                if j==0:
                    dp[i][j]=A[i][j]+min(dp[i-1][j],dp[i-1][j+1]) ## Left Edge Case
                elif j==n-1:
                    dp[i][j]=A[i][j]+min(dp[i-1][j],dp[i-1][j-1]) ## Right Edge Case
                else:
                    dp[i][j]=A[i][j]+min(dp[i-1][j-1],dp[i-1][j],dp[i-1][j+1])
        print(dp)
        result = min(dp[-1])
        #print(A[-1:])
        return result
