// Time Complexity : O(max(max element, n))
// Space Complexity : O(max)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No

// find max value, create dp array of size max + 1. store the count of each value in dp array. use 2 variables skip and take to find out the answer.

class Solution {
    public int deleteAndEarn(int[] nums) {
        if(nums == null || nums.length == 0) {
            return 0;
        }
        int max = Integer.MIN_VALUE;
        for(int i = 0; i < nums.length; i++) {
            max = Math.max(max, nums[i]);
        }
        int[] dp = new int[max + 1];
        for(int i = 0; i < nums.length; i++) {
            int index = nums[i];
            dp[index] = dp[index] + index;
        }
        int skip = 0;
        int take = dp[0];
        for(int i = 1; i < dp.length; i++) {
            int temp = skip;
            skip = Math.max(skip, take);
            take = temp + dp[i];
        }
        return Math.max(skip, take);
    }
}
