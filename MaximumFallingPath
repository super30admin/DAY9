//Time O(n)
//Leetcode tested

public class MinimumFallingPath {
    public int minFallingPathSum(int[][] matrix) {
        for (int i = matrix.length-2; i >= 0; i--) {
            for (int j = 0; j < matrix[i].length; j++) {
                if(j!=0 && j!=matrix[i].length-1){
                    matrix[i][j]= Math.min(Math.min(matrix[i][j]+matrix[i+1][j],matrix[i][j]+matrix[i+1][j-1]),matrix[i][j]+matrix[i+1][j+1]);
                }
                else if(j==0){
                    matrix[i][j]= Math.min(matrix[i][j]+matrix[i+1][j],matrix[i][j]+matrix[i+1][j+1]);
                }else{
                    matrix[i][j]= Math.min(matrix[i][j]+matrix[i+1][j],matrix[i][j]+matrix[i+1][j-1]);
                }
            }
        }

        int min=Integer.MAX_VALUE;
        for (int j = 0; j < matrix[0].length; j++) {
            if(min>matrix[0][j]){
                min=matrix[0][j];
            }
        }
        return min;
    }
}
