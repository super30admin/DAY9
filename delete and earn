// Time Complexity :O(n)
// Space Complexity : O(n)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this :
modifying the array to fit house robber

// Your code here along with comments explaining your approach
class Solution {
    public int deleteAndEarn(int[] nums) {
        if(nums == null || nums.length == 0)
            return 0;
        
        //find the max element
        int max =0;
        for(int i=0; i<nums.length; i++)
            max = Math.max(max, nums[i]);
        
        int dp[] = new int[max+1];
        for(int num : nums)
        {
            dp[num] = dp[num] + num;
        }
        
        int skip = 0, take = dp[0];
        
        for(int i=1; i<dp.length; i++)
        {
            int not_deleted = Math.max(skip, take);
            take = skip + dp[i];
            skip = not_deleted;
            
        }
        
        return Math.max(skip, take);
    }
}
