// Time Complexity : O(N)
// Space Complexity : O(1) 
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No

// Your code here along with comments explaining your approach: Similar Logic to Paint House. Idea is to update the matrix element with Min result from previous row.

SOLUTION:

class Solution {
    public int minFallingPathSum(int[][] A) {
        if(A.length==0 || A==null){
            return 0;
        }
        
        int result = Integer.MAX_VALUE; 
        for(int i = 1 ; i < A.length ; i++){
            for(int j = 0 ; j < A[0].length;j++){
                if(j==0){
                    A[i][j] = A[i][j] + Math.min(A[i-1][j],A[i-1][j+1]);
                }else if(j==A.length-1){
                    A[i][j] = A[i][j] + Math.min(A[i-1][j-1],A[i-1][j]);
                }else{
                    A[i][j] = A[i][j] + Math.min(A[i-1][j],Math.min(A[i-1][j+1],A[i-1][j-1]));
                }
            }
        }
        
        //find MIN from last row
        for(int k = 0  ; k < A.length ; k++){
            result = Math.min(result,A[A.length-1][k]);
        } 
        return result;
    }
}

/*[[1,2,3],
 [4,5,6],
 [7,8,9]]*/ 
